from typing import Iterable, List


def is_valid(cells: Iterable[str]):
    nums = [cell for cell in cells if cell != "."]
    return len(nums) == len(frozenset(nums))


def sub_boxes(board: List[List[str]]) -> Iterable[Iterable[str]]:
    return (
        (board[y + dy][x + dx] for dy in range(3) for dx in range(3))
        for x in range(0, 9, 3)
        for y in range(0, 9, 3)
    )


def is_valid_sudoku(board: List[List[str]]) -> bool:
    return (
        all(map(is_valid, board))
        and all(map(is_valid, zip(*board)))
        and all(map(is_valid, sub_boxes(board)))
    )


def test_example_1():
    assert (
        is_valid_sudoku(
            [
                ["5", "3", ".", ".", "7", ".", ".", ".", "."],
                ["6", ".", ".", "1", "9", "5", ".", ".", "."],
                [".", "9", "8", ".", ".", ".", ".", "6", "."],
                ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                [".", "6", ".", ".", ".", ".", "2", "8", "."],
                [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                [".", ".", ".", ".", "8", ".", ".", "7", "9"],
            ]
        )
        is True
    )


def test_example_2():
    assert (
        is_valid_sudoku(
            [
                ["8", "3", ".", ".", "7", ".", ".", ".", "."],
                ["6", ".", ".", "1", "9", "5", ".", ".", "."],
                [".", "9", "8", ".", ".", ".", ".", "6", "."],
                ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
                ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
                ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
                [".", "6", ".", ".", ".", ".", "2", "8", "."],
                [".", ".", ".", "4", "1", "9", ".", ".", "5"],
                [".", ".", ".", ".", "8", ".", ".", "7", "9"],
            ]
        )
    ) is False


def test_other():
    assert (
        is_valid_sudoku(
            [
                [".", "9", ".", ".", "4", ".", ".", ".", "."],
                ["1", ".", ".", ".", ".", ".", "6", ".", "."],
                [".", ".", "3", ".", ".", ".", ".", ".", "."],
                [".", ".", ".", ".", ".", ".", ".", ".", "."],
                [".", ".", ".", "7", ".", ".", ".", ".", "."],
                ["3", ".", ".", ".", "5", ".", ".", ".", "."],
                [".", ".", "7", ".", ".", "4", ".", ".", "."],
                [".", ".", ".", ".", ".", ".", ".", ".", "."],
                [".", ".", ".", ".", "7", ".", ".", ".", "."],
            ]
        )
        is True
    )
